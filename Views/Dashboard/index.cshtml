@{
    ViewData["Title"] = "Traffic Analytics Dashboard";
}
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

<div class="d-flex justify-content-between align-items-center mb-3">
    <h4 class="mb-0">Traffic Analytics Dashboard</h4>
    <button id="themeToggle" class="btn btn-outline-secondary btn-sm">
        <i class="bi bi-moon"></i> Dark
    </button>
    <a href="/Account/Logout" class="btn btn-outline-danger d-flex align-items-center gap-2 px-3 shadow-sm btn-logout">
        <i class="bi bi-box-arrow-right"></i> Logout
    </a>
</div>

<!-- Filters -->
<div class="card shadow-sm mb-3">
    <div class="card-body d-flex gap-3 flex-wrap">
        <select class="form-select w-auto" id="websiteFilter">
            <option value="all">All Websites</option>
            <option value="siteA">Website A</option>
            <option value="siteB">Website B</option>
            <option value="siteC">Website C</option>
        </select>

        <select class="form-select w-auto" id="sourceFilter">
            <option value="all">All Sources</option>
            <option value="google">Google</option>
            <option value="bing">Bing</option>
            <option value="direct">Direct</option>
        </select>
    </div>
</div>

<!-- Comparison Settings -->
<div class="card shadow-sm mb-4">
    <div class="card-body">
        <label class="form-label fw-bold">Comparison Settings</label>
        <select class="form-select w-auto" id="comparisonFilter">
            <option value="none">No Comparison</option>
            <option value="prev">Previous Period</option>
            <option value="year">Last Year</option>
        </select>
    </div>
</div>

<!-- Tabs -->
<ul class="nav nav-tabs mb-3" id="dashboardTabs" role="tablist">
    <li class="nav-item"><button class="nav-link active" data-bs-toggle="tab" data-bs-target="#traffic">Traffic Overview</button></li>
    <li class="nav-item"><button class="nav-link" data-bs-toggle="tab" data-bs-target="#analytics">Analytics Detail</button></li>
</ul>

<div class="tab-content">
    <!-- Tab 1: Traffic Overview -->
    <div class="tab-pane fade show active" id="traffic">
        <div class="row mb-4">
            <div class="col-md-6">
                <div class="card shadow-sm"><div class="card-body"><h6>Traffic Distribution</h6><canvas id="donutChart"></canvas></div></div>
            </div>
            <div class="col-md-6">
                <div class="card shadow-sm"><div class="card-body d-flex justify-content-between">
                    <h6>Traffic Trends</h6>
                    <div class="d-flex gap-2">
                        <select class="form-select form-select-sm" id="ipFilter">
                            <option value="all">All IPs</option>
                            <option value="local">Local</option>
                            <option value="other">Other</option>
                        </select>
                        <select class="form-select form-select-sm" id="periodFilter">
                            <option value="daily">Daily</option>
                            <option value="weekly">Weekly</option>
                            <option value="monthly">Monthly</option>
                        </select>
                    </div>
                </div>
                <canvas id="lineChart"></canvas></div></div>
            </div>
        </div>
        <div class="row" id="summaryCards"></div>
    </div>

    <!-- Tab 2: Analytics Detail -->
    <div class="tab-pane fade" id="analytics">
        <div class="row mb-4">
            <div class="col-md-4"><div class="card shadow-sm p-3 text-center"><h6>Total Visitors</h6><h3 id="totalVisitors">0</h3></div></div>
            <div class="col-md-4"><div class="card shadow-sm p-3 text-center"><h6>Total Pageviews</h6><h3 id="totalPageviews">0</h3></div></div>
            <div class="col-md-4"><div class="card shadow-sm p-3 text-center"><h6>Realtime Pageviews</h6><h3 id="realtimePageviews">0</h3></div></div>
        </div>
        <div class="card shadow-sm mb-4"><div class="card-body"><h6>Pageviews Over Time</h6><canvas id="barChart"></canvas></div></div>
        <div class="row">
            <div class="col-md-6"><div class="card shadow-sm"><div class="card-body"><h6>Top Pages</h6><table class="table table-sm"><thead><tr><th>#</th><th>Pages</th><th>Visitors</th><th>Pageviews</th></tr></thead><tbody id="pagesTable"></tbody></table></div></div></div>
            <div class="col-md-6"><div class="card shadow-sm"><div class="card-body"><h6>Top Referrers</h6><table class="table table-sm"><thead><tr><th>#</th><th>Referrer</th><th>Visitors</th><th>Pageviews</th></tr></thead><tbody id="referrersTable"></tbody></table></div></div></div>
        </div>
    </div>
</div>

<script>
let donutChart, lineChart, barChart;

async function loadData() {
    const res = await fetch("/api/traffic");
    const json = await res.json();

    // Donut Chart
    const totalLocal = json.Summary.LocalIPs.reduce((a,b)=>a+b,0);
    const totalOther = json.Summary.OtherIPs.reduce((a,b)=>a+b,0);
    if (!donutChart) {
        donutChart = new Chart(document.getElementById('donutChart'), {
            type: 'doughnut',
            data: { labels: ["Local", "Other"], datasets: [{ data: [totalLocal, totalOther], backgroundColor: ['#0d6efd','#198754'] }] }
        });
    } else {
        donutChart.data.datasets[0].data = [totalLocal,totalOther]; donutChart.update();
    }

    if (!lineChart) {
    const ctx = document.getElementById('lineChart').getContext('2d');

    // Gradient untuk dataset
    const gradientTotal = ctx.createLinearGradient(0, 0, 0, 200);
    gradientTotal.addColorStop(0, 'rgba(13,110,253,0.6)');
    gradientTotal.addColorStop(1, 'rgba(13,110,253,0)');

    const gradientUnique = ctx.createLinearGradient(0, 0, 0, 200);
    gradientUnique.addColorStop(0, 'rgba(25,135,84,0.6)');
    gradientUnique.addColorStop(1, 'rgba(25,135,84,0)');

    lineChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: json.Summary.Labels,
            datasets: [
                {
                    label: 'Total Clicks',
                    data: json.Summary.TotalClicks,
                    borderColor: '#0d6efd',
                    backgroundColor: gradientTotal,
                    fill: true,
                    tension: 0.4,
                    pointBackgroundColor: '#0d6efd',
                    pointRadius: 4
                },
                {
                    label: 'Unique Clicks',
                    data: json.Summary.UniqueClicks,
                    borderColor: '#198754',
                    backgroundColor: gradientUnique,
                    fill: true,
                    tension: 0.4,
                    pointBackgroundColor: '#198754',
                    pointRadius: 4
                }
            ]
        },
        options: {
            responsive: true,
            plugins: {
                legend: { position: 'top', labels: { usePointStyle: true } },
                tooltip: {
                    mode: 'index',
                    intersect: false,
                    backgroundColor: '#000',
                    titleColor: '#fff',
                    bodyColor: '#fff'
                }
            },
            interaction: { mode: 'nearest', axis: 'x', intersect: false },
            scales: {
                x: { grid: { display: false } },
                y: { beginAtZero: true }
            }
        }
    });
} else {
    lineChart.data.labels = json.Summary.Labels;
    lineChart.data.datasets[0].data = json.Summary.TotalClicks;
    lineChart.data.datasets[1].data = json.Summary.UniqueClicks;
    lineChart.update();
}

    // Summary Cards
    const cards=document.getElementById("summaryCards"); cards.innerHTML="";
    json.Details.forEach(d=>{
        cards.innerHTML += `<div class="col-md-3 mb-3"><div class="card shadow-sm"><div class="card-body">
            <h6 class="fw-bold">${d.SourceDomain}</h6>
            <div>Local: ${d.LocalIPs}</div><div>Other: ${d.OtherIPs}</div>
            <div>Total: ${d.TotalClicks}</div><div>Unique: ${d.UniqueClicks}</div>
        </div></div></div>`;
    });

    // Analytics Summary
    document.getElementById("totalVisitors").textContent = json.Summary.TotalClicks.reduce((a,b)=>a+b,0);
    document.getElementById("totalPageviews").textContent = json.Summary.TotalClicks.reduce((a,b)=>a+b,0)*2;
    document.getElementById("realtimePageviews").textContent = Math.floor(Math.random()*2000);

    // Bar Chart
    if (!barChart) {
        barChart = new Chart(document.getElementById('barChart'), {
            type:'bar',
            data:{ labels:json.Summary.Labels, datasets:[{ label:"Pageviews", data:json.Summary.TotalClicks, backgroundColor:'rgba(13,110,253,0.7)' }] }
        });
    } else {
        barChart.data.labels=json.Summary.Labels;
        barChart.data.datasets[0].data=json.Summary.TotalClicks;
        barChart.update();
    }

    // Tables
    const pagesTable=document.getElementById("pagesTable"); pagesTable.innerHTML="";
    json.Details.forEach((d,i)=>{ pagesTable.innerHTML += `<tr><td>${i+1}</td><td>/${d.SourceDomain}</td><td>${d.LocalIPs+d.OtherIPs}</td><td>${d.TotalClicks}</td></tr>`; });
    const referrersTable=document.getElementById("referrersTable"); referrersTable.innerHTML="";
    json.Details.forEach((d,i)=>{ referrersTable.innerHTML += `<tr><td>${i+1}</td><td>${d.SourceDomain}.com</td><td>${d.LocalIPs}</td><td>${d.TotalClicks}</td></tr>`; });

    document.getElementById("themeToggle").addEventListener("click", function () {
    document.body.classList.toggle("dark-mode");

    const icon = this.querySelector("i");
    if (document.body.classList.contains("dark-mode")) {
        this.innerHTML = '<i class="bi bi-brightness-high"></i> Light';
    } else {
        this.innerHTML = '<i class="bi bi-moon"></i> Dark';
    }

    // simpan preferensi ke localStorage
    localStorage.setItem("theme", document.body.classList.contains("dark-mode") ? "dark" : "light");
    });

    // load preferensi saat halaman dibuka
    window.addEventListener("DOMContentLoaded", () => {
        if (localStorage.getItem("theme") === "dark") {
            document.body.classList.add("dark-mode");
            document.getElementById("themeToggle").innerHTML = '<i class="bi bi-brightness-high"></i> Light';
        }
    });
}

loadData();
setInterval(loadData, 10000);
</script>
<style>
    body.dark-mode {
        background-color: #1e1e2f;
        color: #f5f5f5;
    }
    body.dark-mode .sidebar {
        background: #111827;
    }
    body.dark-mode .sidebar a {
        color: #d1d5db;
    }
    body.dark-mode .sidebar a:hover {
        background: rgba(255,255,255,0.1);
    }
    body.dark-mode .card {
        background: #2d2d3a;
        color: #f5f5f5;
    }
    body.dark-mode .nav-tabs .nav-link {
        color: #d1d5db;
    }
    body.dark-mode .nav-tabs .nav-link.active {
        background: #374151;
        color: #fff;
    }
</style>
