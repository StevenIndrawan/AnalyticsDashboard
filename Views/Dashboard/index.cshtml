@{
    ViewData["Title"] = "Traffic Analytics Dashboard";
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<div class="container-fluid p-4">
    <h4 class="mb-3">Traffic Analytics Dashboard</h4>
    <!-- Filters -->
    <div class="card shadow-sm mb-3">
        <div class="card-body d-flex gap-3">
            <select class="form-select w-auto" id="websiteFilter">
                <option>All Websites</option>
                <option>Site A</option>
                <option>Site B</option>
            </select>

            <select class="form-select w-auto" id="sourceFilter">
                <option>All Sources</option>
                <option>Google</option>
                <option>Bing</option>
                <option>Direct</option>
            </select>
        </div>
    </div>

    <!-- Comparison -->
    <div class="card shadow-sm mb-4">
        <div class="card-body">
            <label class="form-label fw-bold">Comparison Settings</label>
            <select class="form-select w-auto" id="comparisonFilter">
                <option>No Comparison</option>
                <option>Previous Period</option>
                <option>Last Year</option>
            </select>
        </div>
    </div>

    <!-- Charts -->
    <div class="row mb-4">
        <div class="col-md-6">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h6>Traffic Distribution by Source</h6>
                    <canvas id="donutChart" height="200"></canvas>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card shadow-sm">
                <div class="card-body d-flex justify-content-between align-items-center">
                    <h6>Traffic Trends</h6>
                    <div class="d-flex gap-2">
                        <select class="form-select form-select-sm" id="ipFilter">
                            <option>All IPs</option>
                            <option>Local</option>
                            <option>Other</option>
                        </select>
                        <select class="form-select form-select-sm" id="periodFilter">
                            <option>Daily</option>
                            <option>Weekly</option>
                            <option>Monthly</option>
                        </select>
                    </div>
                </div>
                <canvas id="lineChart" height="200"></canvas>
            </div>
        </div>
    </div>

    <!-- Summary Cards -->
    <div class="row" id="summaryCards"></div>
</div>

<script>
let donutChart, lineChart;

async function loadData() {
    try {
        const res = await fetch("@Url.Content("~/api/traffic")");
        if (!res.ok) throw new Error("HTTP " + res.status);

        const json = await res.json();
        console.log("✅ Data dari API:", json);

        // Donut Chart
        const totalLocal = json.Summary.LocalIPs.reduce((a,b)=>a+b,0);
        const totalOther = json.Summary.OtherIPs.reduce((a,b)=>a+b,0);

        if (!donutChart) {
            donutChart = new Chart(document.getElementById('donutChart'), {
                type: 'doughnut',
                data: {
                    labels: ["Local IPs", "Other IPs"],
                    datasets: [{
                        data: [totalLocal, totalOther],
                        backgroundColor: ['#0d6efd', '#198754']
                    }]
                }
            });
        } else {
            donutChart.data.datasets[0].data = [totalLocal, totalOther];
            donutChart.update();
        }

        // Line Chart
        if (!lineChart) {
            const ctx = document.getElementById('lineChart').getContext('2d');

            // Gradient untuk dataset
            const gradientTotal = ctx.createLinearGradient(0, 0, 0, 200);
            gradientTotal.addColorStop(0, 'rgba(13,110,253,0.6)');
            gradientTotal.addColorStop(1, 'rgba(13,110,253,0)');

            const gradientUnique = ctx.createLinearGradient(0, 0, 0, 200);
            gradientUnique.addColorStop(0, 'rgba(25,135,84,0.6)');
            gradientUnique.addColorStop(1, 'rgba(25,135,84,0)');

            lineChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: json.Summary.Labels,
                    datasets: [
                        {
                            label: 'Total Clicks',
                            data: json.Summary.TotalClicks,
                            borderColor: '#0d6efd',
                            backgroundColor: gradientTotal,
                            fill: true,
                            tension: 0.4,
                            pointBackgroundColor: '#0d6efd',
                            pointRadius: 4
                        },
                        {
                            label: 'Unique Clicks',
                            data: json.Summary.UniqueClicks,
                            borderColor: '#198754',
                            backgroundColor: gradientUnique,
                            fill: true,
                            tension: 0.4,
                            pointBackgroundColor: '#198754',
                            pointRadius: 4
                        }
                    ]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: { position: 'top', labels: { usePointStyle: true } },
                        tooltip: {
                            mode: 'index',
                            intersect: false,
                            backgroundColor: '#000',
                            titleColor: '#fff',
                            bodyColor: '#fff'
                        }
                    },
                    interaction: { mode: 'nearest', axis: 'x', intersect: false },
                    scales: {
                        x: { grid: { display: false } },
                        y: { beginAtZero: true }
                    }
                }
            });
        } else {
            lineChart.data.labels = json.Summary.Labels;
            lineChart.data.datasets[0].data = json.Summary.TotalClicks;
            lineChart.data.datasets[1].data = json.Summary.UniqueClicks;
            lineChart.update();
        }


        // Summary Cards
        const cards = document.getElementById("summaryCards");
        cards.innerHTML = "";
        json.Details.forEach(d => {
            cards.innerHTML += `
                <div class="col-md-3 mb-3">
                    <div class="card shadow-sm h-100">
                        <div class="card-body">
                            <h6 class="fw-bold">${d.SourceDomain}</h6>
                            <div>Local: <span class="text-primary">${d.LocalIPs}</span></div>
                            <div>Other: <span class="text-success">${d.OtherIPs}</span></div>
                            <div>Total: ${d.TotalClicks}</div>
                            <div>Unique: ${d.UniqueClicks}</div>
                        </div>
                    </div>
                </div>
            `;
        });

    } catch (err) {
        console.error("❌ Fetch error:", err);
    }
}

loadData();
setInterval(loadData, 5000);
</script>
